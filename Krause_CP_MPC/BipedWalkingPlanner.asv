%% CP-MPC

clc
close all
clear all

% Krause, Manuel, et al. "Stabilization of the capture point dynamics for bipedal walking based on model predictive control." 
% IFAC Proceedings Volumes 45.22 (2012): 165-171.

% Parameters
T = 0.01;                     % [s] : sampling time
hz = 1/T;
h = 0.75;                       % Desired com height
g = 9.81;                       % gravity acceleration
sim_time = 12;
sim_tick = sim_time*hz; 
w = sqrt(g/h);                  

ssp_time = 0.7;                % step time
dsp_time = 0.3;
step_time = ssp_time + dsp_time;
step_tick = step_time / T;

step_length = 0.5;
step_width  = 0.30;

preview_window = 2*step_time*hz;

Qe = 1.0;            % preview gain
Qx = zeros(3,3);     % preview gain
R = 1.0*10^(-6);

N = preview_window;

number_of_step = 10;

L_or_R = -1;
%% CP-MPC
close all
[pRef, fRef] = FootStepGenerator(number_of_step, step_length, step_width, L_or_R);

vec_end = length(pRef(1,:))'

foot_p1 = zeros(2, vec_end);
foot_p2 = zeros(2, vec_end);
foot_p3 = zeros(2, vec_end);
foot_p4 = zeros(2, vec_end);

for i = 1:1:vec_end
    foot_p1(:, i) = fRef([1:2],i) + rotateZaxis(fRef(3,i)) * [ 0.17; 0.10]; 
    foot_p2(:, i) = fRef([1:2],i) + rotateZaxis(fRef(3,i)) * [-0.13; 0.10]; 
    foot_p3(:, i) = fRef([1:2],i) + rotateZaxis(fRef(3,i)) * [-0.13;-0.10]; 
    foot_p4(:, i) = fRef([1:2],i) + rotateZaxis(fRef(3,i)) * [ 0.17;-0.10]; 
end


[ZmpRef_x, ZmpRef_y] = ZmpGenerator(T, sim_tick, pRef, ssp_time, dsp_time, step_time, number_of_step);

% figure()
% plot(pRef(1,:), pRef(2,:))
% figure()
% plot(ZmpRef_x, ZmpRef_y)

zmp_vec_end = length(ZmpRef_x)
for i = 1:1:500
    ZmpRef_x(zmp_vec_end+i) = ZmpRef_x(zmp_vec_end);
    ZmpRef_y(zmp_vec_end+i) = ZmpRef_y(zmp_vec_end);
end

%%
[Gi,Gx,Gd,A,B,C] = PreviewParameter(T,h,g,N,Qe,Qx,R);
[com_ref, cp_ref] = PreviewController(T,sim_tick,N,ZmpRef_x,ZmpRef_y,A,B,C,Gi,Gx,Gd,w,g,h);

% Matrix manipulation
A =   exp(w*T);
B = 1-exp(w*T); 

F_xi = zeros(N, 1);
F_p  = zeros(N, N);
Theta = zeros(N, N);
e1 = zeros(N, 1);
e1(1,1) = 1;

for i = 1:1:N

    F_xi(i, 1) = A^i;
    Theta(i,i) = 1;

    for j = 1:1:N
        % (F_p)
        if(i < j)
            F_p(i,j) = 0;
        else;
            F_p(i,j) = A^(i-j)*B;
        end
        % (Theta)
        if(i == j+1)
            Theta(i,j) = -1;
        end
    end
end

current_step = 0;
j = 1;

%% MPC data
cp_x_ref_mpc = zeros(N, sim_tick);
lb_x = zeros(N, sim_tick);
ub_x = zeros(N, sim_tick);

cp_y_ref_mpc = zeros(N, sim_tick);
lb_y = zeros(N, sim_tick);
ub_y = zeros(N, sim_tick);

foot_ub_x = zeros(1, sim_tick);
foot_ub_y = zeros(1, sim_tick);
foot_lb_x = zeros(1, sim_tick);
foot_lb_y = zeros(1, sim_tick);

step_cnt = 1;
for i = 1:1:sim_tick + 1000
        
    if step_cnt > number_of_step + 2
        break
    end

    cp_x_ref_mpc(1:N, i) = cp_ref(i:i+N-1, 1);
    cp_y_ref_mpc(1:N, i) = cp_ref(i:i+N-1, 2);

    R = rotateZaxis(pRef(3,step_cnt));
    RT = transpose(R);

    % zmp 
    lb_x_dir = RT * [-0.13; -0.0];
    lb_y_dir = RT * [-0.00; -0.1];

    ub_x_dir = RT * [0.17; 0.0];
    ub_y_dir = RT * [0.00; 0.1];

    lb_x(1:N, i) = ZmpRef_x(i:i+N-1, 1) + lb_x_dir(1);
    ub_x(1:N, i) = ZmpRef_x(i:i+N-1, 1) + ub_x_dir(1);

    lb_y(1:N, i) = ZmpRef_y(i:i+N-1, 1) + lb_y_dir(2);
    ub_y(1:N, i) = ZmpRef_y(i:i+N-1, 1) + ub_y_dir(2);

    % foot
    foot_pnt1_dir = R * [ 0.17; 0.10]
    foot_pnt1_dir =
    foot_lb_x_dir = 
    foot_lb_y_dir =

    foot_pnt1_x(:, i) = ZmpRef_x(i,1) + R * [ 0.17; 0.10]; 
    foot_ub_y(:, i) = ZmpRef_y(i,1) + R * [-0.13; 0.10]; 
    foot_lb_x(:, i) = ZmpRef_x(i,1) + R * [-0.13;-0.10]; 
    foot_lb_y(:, i) = ZmpRef_y(i,1) + R * [ 0.17;-0.10]; 
   
   
    if (rem(i, step_tick) == 0)
        step_cnt = step_cnt + 1;
    end
end

%% Quadratic programming

cp_x_hat = zeros(1,sim_tick); % real value  
p_x_hat = zeros(1,sim_tick);
cp_x_opt = zeros(N, sim_tick);  % opt value
p_x_opt = zeros(N, sim_tick);

cp_y_hat = zeros(1,sim_tick); % real value  
p_y_hat = zeros(1,sim_tick);
cp_y_opt = zeros(N, sim_tick);  % opt value
p_y_opt = zeros(N, sim_tick);

Q = eye(N, N);
R = 0.00001 * eye(N, N);

step_cnt = 1;
for k=1:1:sim_tick

    % Cost function
    if step_cnt > number_of_step + 2
        break
    end

    H = transpose(Theta) * R * Theta + transpose(F_p) * Q * F_p;

    if k == 1
        gx = transpose(F_p) * Q * (F_xi * cp_x_hat(1, k) - cp_x_ref_mpc(1:N,k)) - transpose(Theta) * R * e1 * p_x_hat(1,k);
        gy = transpose(F_p) * Q * (F_xi * cp_y_hat(1, k) - cp_y_ref_mpc(1:N,k)) - transpose(Theta) * R * e1 * p_y_hat(1,k);
    else
        gx = transpose(F_p) * Q * (F_xi * cp_x_hat(1, k) - cp_x_ref_mpc(1:N,k)) - transpose(Theta) * R * e1 * p_x_hat(1,k-1);
        gy = transpose(F_p) * Q * (F_xi * cp_y_hat(1, k) - cp_y_ref_mpc(1:N,k)) - transpose(Theta) * R * e1 * p_y_hat(1,k-1);
    end

    p_x_opt(1:N,k) = quadprog(H, gx,[],[],[],[], lb_x(1:N,k), ub_x(1:N,k));
    p_y_opt(1:N,k) = quadprog(H, gy,[],[],[],[], lb_y(1:N,k), ub_y(1:N,k));

    % cp_x_opt(1:N,k) = F_xi * cp_x_hat(1, k) + F_p * px_opt(1:N,k);
    % cp_y_opt(1:N,k) = F_xi * cp_x_hat(1, k) + F_p * py_opt(1:N,k);

    p_x_hat(1,k) = p_x_opt(1,k);
    p_y_hat(1,k) = p_y_opt(1,k);

    % cp_x_hat(1,k+1) = cp_x_opt(1,k);
    % cp_y_hat(1,k+1) = cp_y_opt(1,k);

    cp_x_hat(1,k+1) = A*cp_x_hat(1,k) + B*p_x_hat(1,k);
    cp_y_hat(1,k+1) = A*cp_y_hat(1,k) + B*p_y_hat(1,k);

    if (rem(i, step_tick) == 0)
        step_cnt = step_cnt + 1;
    end
end

%%
clc
close all
figure()
hold on
plot([1:sim_tick], cp_ref(1:sim_tick,1), [1:sim_tick], cp_x_hat(1,1:sim_tick)')
plot([1:sim_tick], ZmpRef_x(1:sim_tick,1), [1:sim_tick], p_x_hat(1,1:sim_tick)')
plot([1:sim_tick], ub_x(1,1:sim_tick), [1:sim_tick], lb_x(1,1:sim_tick))
legend('cp ref', 'cp mpc','p ref', 'p mpc')
title('x')

figure()
hold on
plot([1:sim_tick], cp_ref(1:sim_tick,2), [1:sim_tick], cp_y_hat(1,1:sim_tick)')
plot([1:sim_tick], ZmpRef_y(1:sim_tick,1), [1:sim_tick], p_y_hat(1,1:sim_tick)')
plot([1:sim_tick], ub_y(1,1:sim_tick), [1:sim_tick], lb_y(1,1:sim_tick))
legend('cp ref', 'cp mpc','p ref', 'p mpc')
title('y')

figure()
axis equal
hold on
plot(ZmpRef_x(1:sim_tick,1), ZmpRef_y(1:sim_tick,1))
plot(p_x_hat(1,[1:sim_tick])', p_y_hat(1,[1:sim_tick])');
plot(cp_x_hat(1,1:sim_tick)', cp_y_hat(1,1:sim_tick)')
plot(ub_x(1,1:sim_tick), ub_y(1,1:sim_tick), '--k')
plot(lb_x(1,1:sim_tick), lb_y(1,1:sim_tick), '--k')
legend('zmp ref', 'zmp hat', 'cp hat')

plot(fRef(1,:), fRef(2,:),'ro', 'HandleVisibility', 'off')

union_poly = polyshape();

for i = 1:1:sim_tick
    
    % i = 605
    x = [ub_x(1,i), ub_x(1,i), lb_x(1,i), lb_x(1,i)];
    y = [ub_y(1,i), lb_y(1,i), lb_y(1,i), ub_y(1,i)];
    pgon = polyshape(x, y)
    % plot(pgon, 'FaceColor', 'none', 'FaceAlpha', 0.3, 'EdgeColor', 'black', 'HandleVisibility', 'off');

    union_poly = union([union_poly, pgon]);
end

plot(union_poly, 'FaceColor', 'none', 'FaceAlpha', 1.0, 'EdgeColor', 'black', 'HandleVisibility', 'off');

for i = 1:1:vec_end
  
    x = [foot_p1(1,i), foot_p2(1,i), foot_p3(1,i), foot_p4(1,i)];
    y = [foot_p1(2,i), foot_p2(2,i), foot_p3(2,i), foot_p4(2,i)];

    pgon = polyshape(x, y)
    plot(pgon, 'FaceColor', 'red', 'EdgeColor', 'black', 'HandleVisibility', 'off'); % 여기서 FaceColor와 EdgeColor로 색상 지정
end